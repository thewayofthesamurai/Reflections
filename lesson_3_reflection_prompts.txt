When would you want to use a remote repository rather than keeping all your work
local?

ChciaÅ‚bym wykorzystaÄ‡ zdalne repozytorium, gdy chciaÅ‚bym udostÄ™pniÄ‡
moje pliki innym uÅ¼ytkownikom. MoÅ¼e siÄ™ to wydarzyÄ‡ np. wtedy gdy
pracujÄ™ nad jakimÅ› otwartym projektem, do ktÃ³rego majÄ… dostÄ™p inni
programiÅ›ci lub np. gdy chcÄ™ udostÄ™pniÄ‡ mÃ³j plik zespoÅ‚owi, w ktÃ³rym
pracujemy nad danym zagadnieniem.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Mam wiêksz± kontrolê decyduj±c siê na rêczne pobieranie ostatniej
aktualnej wersji z GitHuba. Je¶li ten proces przebiega³by w automatyczny
sposób, to móg³bym byæ zaskoczony zmianami w plikach, które nagle siê
pojawi³y, bo np. inny programista zaktualizowa³ repozytorium na GitHubie.
Je¶li zrobiê to w rêczny sposób, to nie bêdê niczym zaskoczony, a ewentualne zmiany sprawdzê wtedy gdy zdecydujê siê na pobranie repozytorium
z GitHub

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Branches, s± wykorzystywane w lokalnym repozytorium do tworzenia 
dodatkowych np. eksperymentalnych wersji oprogramowania lub innych wersji.
Instrukcja clone s³u¿y do klonowania repozytorów ze zdalnych lub lokalnych repozytorów.

Natomiast instrukcja fork to odpowiednik instrukcji clone, przy czym
klonowane jest repozytorium na GitHubie do innego repozytorium na Githubie. Fork wykonuje siê po to, aby mieæ mo¿liwo¶æ edytowania repozytorium
jako w³asnego, poniewa¿ u¿ytkownicy zwykle nie zgadzaj± siê na wprowadzanie
zmian we w³asnych repozytoriach. Dodatkowo fork zachowuje informacjê z którego repozytorium moje nowe repozytorium zosta³o stworzone.

What is the benefit of having a copy of the last known state of the remote stored locally?

Dziêki przechowywaniu lokalnie ostatniego stanu zdalnego repozytorium git mo¿e poinformowaæ nas o tym, ¿e zasz³y zmiany i dodatkowo bêddziemy mieli t± informacjê jak nie bêdziemy mieli dostêpu do internetu. Jednak najwa¿niejsze dwie funkcjonalno¶ci, które s± z tym zwi±zane dotycz± rozwi±zywania konfliktów, np. kiedy jednocze¶nie zmiany zasz³y lokalnie i w zdalnym repozytorium, wtedy lokalnie przechowywana wersja zdalnego repozytorium jest ³±czona z now± wersj± z repozytorium githuba przy pomocy instrukcji get fetch, a potem ³±czona z ga³êzi± master przy pomocy polecenia git merge master origin/master. Nie ma potrzeby wykonywania tych dwóch instrukcji, zamiast nich mo¿na to samo osi±gn±æ uruchamiaj±c instrukcjê git pull origin master. Drug± funkcjonalno¶ci± jest w³a¶ciwo¶æ fast foward merges, która polega na przepisaniu nazwy ga³êzi origin/master na najnowsz± wersjê ga³êzi master, ale mo¿e siê to wydarzyæ tylko wtedy, gdy master/origin jest przodkiem obecnej ga³êzi master
